# ===================================================================
# Online Medicine Delivery System - Environment Configuration
# ===================================================================
# Copy this file to .env and configure the values for your environment
#
# For Local Development:
# 1. Copy: cp .env.example .env
# 2. Configure database and service URLs
# 3. Set up Google OAuth credentials
# 4. Configure email settings for notifications
#
# For Production:
# Use environment-specific values and secure secrets
# ===================================================================

# ===================================================================
# DATABASE CONFIGURATION
# ===================================================================
# PostgreSQL Database Settings
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=medsdb
DATABASE_URL=postgresql://postgres:postgres@postgres:5432/medsdb

# For local development with separate services:
# DATABASE_URL=postgresql://postgres:postgres@localhost:5432/medsdb

# For production (example):
# DATABASE_URL=postgresql://username:password@production-db-host:5432/production_db

# ===================================================================
# REDIS CONFIGURATION  
# ===================================================================
# Redis Cache Settings
REDIS_URL=redis://redis:6379

# For local development with separate services:
# REDIS_URL=redis://localhost:6379

# For production with authentication:
# REDIS_URL=redis://:password@redis-host:6379

# ===================================================================
# RABBITMQ CONFIGURATION
# ===================================================================
# RabbitMQ Message Broker Settings
RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
RABBITMQ_USER=guest
RABBITMQ_PASSWORD=guest

# For local development with separate services:
# RABBITMQ_URL=amqp://guest:guest@localhost:5672

# For production:
# RABBITMQ_URL=amqp://username:password@rabbitmq-host:5672
# RABBITMQ_USER=production_user
# RABBITMQ_PASSWORD=secure_password

# ===================================================================
# JWT CONFIGURATION
# ===================================================================
# JSON Web Token Secret (Use a strong, random secret in production)
JWT_SECRET=your-super-secret-jwt-key-for-development-change-this-in-production

# Token expiration (optional)
JWT_EXPIRES_IN=24h

# ===================================================================
# EMAIL CONFIGURATION
# ===================================================================
# Gmail SMTP Configuration for Email Notifications
# To get Gmail App Password:
# 1. Enable 2-Factor Authentication on your Google account
# 2. Go to Google Account Settings > Security > App passwords
# 3. Generate an app password for this application

EMAIL_USER=your-email@gmail.com
EMAIL_APP_PASSWORD=your-gmail-app-password

# Alternative email providers:
# For Outlook/Hotmail:
# EMAIL_HOST=smtp-mail.outlook.com
# EMAIL_PORT=587

# For Yahoo:
# EMAIL_HOST=smtp.mail.yahoo.com
# EMAIL_PORT=587

# Custom SMTP settings:
# EMAIL_HOST=your-smtp-host.com
# EMAIL_PORT=587
# EMAIL_SECURE=false
# EMAIL_USER=your-email@domain.com
# EMAIL_PASS=your-email-password

# ===================================================================
# GOOGLE OAUTH CONFIGURATION
# ===================================================================
# Google OAuth 2.0 Credentials
# To set up Google OAuth:
# 1. Go to Google Cloud Console (https://console.cloud.google.com/)
# 2. Create a new project or select existing project
# 3. Enable Google+ API
# 4. Create OAuth 2.0 credentials
# 5. Add authorized origins and redirect URIs

GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Authorized JavaScript origins (for CORS):
# http://localhost:5173 (local development)
# https://your-domain.com (production)

# Authorized redirect URIs:
# http://localhost:5173 (local development)
# https://your-domain.com (production)

# ===================================================================
# PORT CONFIGURATION
# ===================================================================
# Service Port Settings
GATEWAY_PORT=8080
WEB_PORT=5173

# Individual service ports (for manual development)
AUTH_SERVICE_PORT=3001
CATALOG_SERVICE_PORT=3002
ORDER_SERVICE_PORT=3003
DELIVERY_SERVICE_PORT=3004
NOTIFICATION_SERVICE_PORT=3005

# ===================================================================
# SERVICE URLS (For Gateway Routing)
# ===================================================================
# Internal service URLs (Docker Compose)
AUTH_SERVICE_URL=http://auth:3001
CATALOG_SERVICE_URL=http://catalog:3002
ORDER_SERVICE_URL=http://order:3003
DELIVERY_SERVICE_URL=http://delivery:3004
NOTIFICATION_SERVICE_URL=http://notification:3005

# For local development with separate services:
# AUTH_SERVICE_URL=http://localhost:3001
# CATALOG_SERVICE_URL=http://localhost:3002
# ORDER_SERVICE_URL=http://localhost:3003
# DELIVERY_SERVICE_URL=http://localhost:3004
# NOTIFICATION_SERVICE_URL=http://localhost:3005

# ===================================================================
# CORS CONFIGURATION
# ===================================================================
# Cross-Origin Resource Sharing Settings
CORS_ORIGIN=http://localhost:5173

# For production (comma-separated for multiple origins):
# CORS_ORIGIN=https://your-domain.com,https://admin.your-domain.com

# ===================================================================
# ENVIRONMENT SETTINGS
# ===================================================================
# Application Environment
NODE_ENV=development

# Available options:
# development - Local development with debug logging
# production  - Production environment with optimizations
# test       - Testing environment

# ===================================================================
# SECURITY SETTINGS
# ===================================================================
# Security-related configuration
BCRYPT_ROUNDS=10
SESSION_SECRET=your-session-secret-for-development

# Rate limiting (requests per minute)
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX_REQUESTS=100

# ===================================================================
# LOGGING CONFIGURATION
# ===================================================================
# Logging levels and settings
LOG_LEVEL=info

# Available log levels:
# error - Only error messages
# warn  - Warning and error messages  
# info  - Informational, warning, and error messages
# debug - All messages including debug information

# Log file settings (optional)
# LOG_FILE=logs/app.log
# LOG_MAX_SIZE=10MB
# LOG_MAX_FILES=5

# ===================================================================
# CACHE CONFIGURATION
# ===================================================================
# Cache TTL settings (in seconds)
CACHE_TTL_MEDICINES=3600        # 1 hour
CACHE_TTL_USER_SESSION=86400    # 24 hours
CACHE_TTL_SEARCH_RESULTS=1800   # 30 minutes

# ===================================================================
# PAGINATION SETTINGS
# ===================================================================
# Default pagination limits
DEFAULT_PAGE_SIZE=20
MAX_PAGE_SIZE=100

# ===================================================================
# FILE UPLOAD SETTINGS
# ===================================================================
# File upload configuration
MAX_FILE_SIZE=5MB
ALLOWED_FILE_TYPES=jpg,jpeg,png,gif

# Upload directory
UPLOAD_DIR=uploads

# ===================================================================
# HEALTH CHECK SETTINGS
# ===================================================================
# Health check intervals (in milliseconds)
HEALTH_CHECK_INTERVAL=30000
DATABASE_HEALTH_TIMEOUT=5000
REDIS_HEALTH_TIMEOUT=3000

# ===================================================================
# DEVELOPMENT TOOLS
# ===================================================================
# Development and debugging options
ENABLE_SWAGGER=true
ENABLE_DEBUG_ROUTES=true
ENABLE_REQUEST_LOGGING=true

# Auto-reload for development
WATCH_FILES=true
RESTART_DELAY=1000

# ===================================================================
# EXAMPLE PRODUCTION CONFIGURATION
# ===================================================================
# Uncomment and modify for production deployment:

# DATABASE_URL=postgresql://prod_user:secure_password@prod-db-host:5432/medicine_delivery_prod
# REDIS_URL=redis://:secure_redis_password@prod-redis-host:6379
# RABBITMQ_URL=amqp://prod_user:secure_password@prod-rabbitmq-host:5672
# JWT_SECRET=extremely-secure-random-jwt-secret-for-production-use-uuid-generator
# GOOGLE_CLIENT_ID=your-production-google-client-id.apps.googleusercontent.com
# GOOGLE_CLIENT_SECRET=your-production-google-client-secret
# EMAIL_USER=noreply@yourdomain.com
# EMAIL_APP_PASSWORD=your-production-email-app-password
# CORS_ORIGIN=https://yourdomain.com
# NODE_ENV=production
# LOG_LEVEL=warn

# ===================================================================
# NOTES
# ===================================================================
# 1. Never commit .env file to version control
# 2. Use strong, random secrets in production
# 3. Regularly rotate secrets and passwords
# 4. Use environment-specific configuration management
# 5. Consider using secret management services for production
# 6. Test all configurations in staging before production
# 7. Monitor and log configuration changes
# 8. Keep backup of working configurations
# ===================================================================
